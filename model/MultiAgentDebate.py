# from model.MultiAgent import *
from model.RAG import *
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.conditions import MaxMessageTermination, TextMentionTermination, HandoffTermination
from autogen_agentchat.teams import RoundRobinGroupChat, Swarm
from autogen_agentchat.ui import Console
from autogen_agentchat.messages import HandoffMessage
from typing import Sequence
import asyncio
from google import genai
from autogen_ext.models.openai import OpenAIChatCompletionClient

def user_feedback():
    feedback = input('Enter your feedback: (Y to go, APPROVE is stop): ')
    question1 = ''
    question2 = ''
    question3 = ''
    question4 = ''
    question5 = ''
    question6 = ''
    question7 = ''
    question8 = ''
    question9 = ''
    question10 = ''
    if feedback.lower().strip() == 'y':
        question1 = input('Question 1: ')
        question2 = input('Question 2: ')
        question3 = input('Question 3: ')
        question4 = input('Question 4: ')
        question5 = input('Question 5: ')
        question6 = input('Question 6: ')
        question7 = input('Question 7: ')
        question8 = input('Question 8: ')
        question9 = input('Question 9: ')
        question10 = input('Question 10: ')
    elif feedback.lower().strip() == 'accept':
        return 'APPROVE'
    return f""""This a feedback: 
    Question 1: {question1}. 
    Question 2: {question2}.
    Question 3: {question3}.
    Question 4: {question4}.
    Question 5: {question5}.
    Question 6: {question6}.
    Question 7: {question7}.
    Question 8: {question8}.
    Question 9: {question9}.
    Question 10: {question10}.
    Now generate 10 MCQs again from feedback. You keep questions which is good, clear, or relevant.
    Fix questions which is not bad, unclear, or irrelevant."""

class MultiAgent:
    def __init__(self):
        self.__model_client = OpenAIChatCompletionClient(
            model='gemini-1.5-pro',
            api_key='AIzaSyDHWooSXhFddX9WEIpQtbPqPv0ld2ws4m4'
        )
        self.__mcqs = None
        self.__fibqs = None
        self.__distractors = None
        
    def generate_MCQs(self, title, num_of_mcqs,context, task):
        generator_agent = AssistantAgent(
            "GeneratorAgent",
            description="An agent for multiple-choice questions generation.",
            model_client=self.__model_client,
            # handoffs=['EvaluatorAgent', 'UserAgent'],
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            I need you help me in domain of {title}. 
            Use your knowledge to generate to me {num_of_mcqs} MCQs relate to {task}.
            Here is a context that support you to generate MCQs: 
            ------------------------------
            {context}
            ------------------------------
            . Note that if context is empty or not support enough information, you must use your
            specific-domain knowledge to back up.
            . You must follow the pattern below (denoted by each line start with '-'):
                - Each question must contains 4 options.
                - Start each question number with Greece numbers I., II., etc.
                - Start answer with pattern 'A)', 'B)', 'C)', 'D)'.
                - Only one answer is corrected.
                - Start the corrected answer with pattern 'The correct answer is: A), B), C) or D)' (note always print ')' after corrected option)
                - Start the explanation by 'Explanation:', you should explain why it is correct.
                - Start the reference by 'For more information:', you refer useful link relate to Computer Science
                as you know (GeeksForGeeks, Wikipedia, etc).
            """
        )
        
        evaluator_agent = AssistantAgent(
            "EvaluatorAgent",
            description="An agent for evaluating multiple-choice questions.",
            model_client=self.__model_client,
            # handoffs=['GeneratorAgent'],
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Use your knowledge to feedback the quality multiple-choice questions generated by the generator.
            . Provide constructive feedback. 
            Here is the criteria to pass (denoted by each line start with '-'):
                - Question must be easy to answer.
                - Question must relevant to {task}.
                - Question must be clear.
                - Must have only one corrected answer (IMPORTANT). For example: 'The corrected answer is: 'A)', which denote only A).
                - Answer must be correct (IMPORTANT).
            . Response 'PLEASE GENERATE {num_of_mcqs} MCQs AGAIN' in the end of feedback please.
            """
        )
        termination = MaxMessageTermination(4)
        team = RoundRobinGroupChat([generator_agent, evaluator_agent], termination_condition=termination)
        # while True:
        #     stream = team.run_stream(task=task)
        #     # await Console(stream)
        #     asyncio.run(Console(stream))
        #     task = input('Enter your feedback (type exit to leave): ')
        #     if task.lower().strip() == 'exit':
        #         break
        
        async def main() -> None:
            ans = await Console(team.run_stream(task=task))
            for i in range(len(ans.messages)):
                if ans.messages[i].source == 'GeneratorAgent':
                    self.__mcqs = ans.messages[i].content
        asyncio.run(main())
        
    # def generate
    def generate_hard_MCQs(self,title, num_of_mcqs, context, task):
        generator_agent = AssistantAgent(
            name="GeneratorAgent",
            description="An agent for difficult multiple-choice questions generation.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            I need you help me in domain of {title}. 
            Use your knowledge to generate to me {num_of_mcqs} MCQs relate to {task}.
            Here is a context that support you to generate MCQs: 
            ------------------------------
            {context}
            ------------------------------
            . Note that if context is empty or not support enough information, you must use your
            specific-domain knowledge to back up.
            . You must follow the pattern below (denoted by each line start with '-'):
                - Each question must contains 4 options.
                - Start each question number with Greece numbers I., II., etc.
                - Start answer with pattern 'A)', 'B)', 'C)', 'D)'.
                - Only one answer is corrected.
                - Start the corrected answer with pattern 'The correct answer is: A), B), C) or D)' (note always print ')' after corrected option)
                - Start the explanation by 'Explanation:', you should explain why it is correct.
                - Start the reference by 'For more information:', you refer useful link relate to Computer Science
                as you know (GeeksForGeeks, Wikipedia, etc).
            """
        )
        
        # Chain of Thought for evaluation
        evaluator_hard_agent = AssistantAgent(
            "EvaluatorHardAgent",
            description="An agent for evaluating the difficulty of multiple-choice questions.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Use your knowledge to feedback the quality and difficulty of multiple-choice questions generated by generator.
            . Provide constructive feedback. 
            Here is the criteria to pass (denoted by start with '-'):
                - Current question is considered diffult, if it must be satisfied one of the difficult criteria below 
                (denoted by each line start with '+'):
                    + Implicit question (reasoning and thinking)
                    + Hard concept relate to {task} (IMPORTANT).
                    + Business scenario or Coding scenario (IMPORTANT).
                    + Strong relevant distractors (IMPORTANT).
                - Must have only one corrected label for answer (IMPORTANT). For example: 'The corrected answer is: 'A)', which denote only A).
                - Answer must be corrected (IMPORTANT).
            . Response 'PLEASE GENERATE {num_of_mcqs} MCQs AGAIN' in the end of feedback please.
            """
        )
        
            # . Response with 'APPROVE' if it pass all criterias.
            # . Or response with 'REGENERATE' to inform Generator generate again.
            # TextMentionTermination('APPROVE') |
        
        termination = MaxMessageTermination(4)
        team = RoundRobinGroupChat([generator_agent, evaluator_hard_agent], termination_condition=termination)
        
        async def main() -> None:
            ans = await Console(team.run_stream(task=task))
            for i in range(len(ans.messages)):
                if ans.messages[i].source == 'GeneratorAgent':
                    self.__mcqs = ans.messages[i].content
        asyncio.run(main())
        
    def generate_more_MCQs(self, title, mcqs, rem_of_mcqs, context, task):
        generator_agent = AssistantAgent(
            "GeneratorAgent",
            description="An agent for multiple-choice questions generation.",
            model_client=self.__model_client,
            # handoffs=['EvaluatorAgent', 'UserAgent'],
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            I need you help me in domain of {title}. 
            Now continue to generate more {rem_of_mcqs} multiple-choice questions relate to {task}.
            Here is previous multiple-choice questions: 
            ------------------------------
            {mcqs}
            ------------------------------
            .And here is a context that support you to generate MCQs: 
            ------------------------------ 
            {context}
            ------------------------------
            . Note that if context is empty or not support enough information, you must use your
            specific-domain knowledge to back up.
            . You must follow the pattern below (denoted by each line start with '-'):
                - Each question must contains 4 options.
                - Start each question number with Greece numbers from I., II., III., etc (remember must start from 1)
                - Start answer with pattern 'A)', 'B)', 'C)', 'D)'.
                - Only one answer is corrected.
                - Start the corrected answer with pattern 'The correct answer is: A), B), C) or D)' (note always print ')' after corrected option)
                - Start the explanation by 'Explanation:', you should explain why it is correct.
                - Start the reference by 'For more information:', you refer useful link relate to Computer Science
                as you know (GeeksForGeeks, Wikipedia, etc).
            """
        )
        
        evaluator_agent = AssistantAgent(
            "EvaluatorAgent",
            description="An agent for evaluating multiple-choice questions.",
            model_client=self.__model_client,
            # handoffs=['GeneratorAgent'],
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Use your knowledge to feedback the quality multiple-choice questions generated by the generator.
            . Provide constructive feedback. 
            Here is the criteria to pass (denoted by each line start with '-'):
                - Question must start from I., II., III., etc (must start from 1) (IMPORTANT).
                - Current question must be different from previous questions (IMPORTANT).
                - Question must be easy to answer.
                - Question must relevant to {task}.
                - Question must be clear.
                - Must have only one corrected answer (IMPORTANT). For example: 'The corrected answer is: 'A)', which denote only A).
                - Answer must be correct (IMPORTANT).
            . Response 'PLEASE GENERATE {rem_of_mcqs} MCQs AGAIN' in the end of feedback please.
            """
        )
        termination = MaxMessageTermination(4)
        team = RoundRobinGroupChat([generator_agent, evaluator_agent], termination_condition=termination)

        async def main() -> None:
            ans = await Console(team.run_stream(task=task))
            for i in range(len(ans.messages)):
                if ans.messages[i].source == 'GeneratorAgent':
                    self.__mcqs = ans.messages[i].content
        asyncio.run(main())
        
    def generate_more_hard_MCQs(self, title, mcqs, rem_of_mcqs, context, task):
        generator_agent = AssistantAgent(
            "GeneratorAgent",
            description="An agent for difficult multiple-choice questions generation.",
            model_client=self.__model_client,
            # handoffs=['EvaluatorAgent', 'UserAgent'],
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            I need you help me in domain of {title}. 
            Now continue to generate more {rem_of_mcqs} multiple-choice questions relate to {task}.
            Here is previous multiple-choice questions: 
            ------------------------------
            {mcqs}
            ------------------------------
            .And here is a context that support you to generate MCQs: 
            ------------------------------ 
            {context}
            ------------------------------
            . Note that if context is empty or not support enough information, you must use your
            specific-domain knowledge to back up.
            . You must follow the pattern below (denoted by each line start with '-'):
                - Each question must contains 4 options.
                - Start each question number with Greece numbers from I., II., III., etc (remember must start from 1)
                - Start answer with pattern 'A)', 'B)', 'C)', 'D)'.
                - Only one answer is corrected.
                - Start the corrected answer with pattern 'The correct answer is: A), B), C) or D)' (note always print ')' after corrected option)
                - Start the explanation by 'Explanation:', you should explain why it is correct.
                - Start the reference by 'For more information:', you refer useful link relate to Computer Science
                as you know (GeeksForGeeks, Wikipedia, etc).
            """
        )
        
        evaluator_agent = AssistantAgent(
            "EvaluatorAgent",
            description="An agent for evaluating the difficulty of multiple-choice questions.",
            model_client=self.__model_client,
            # handoffs=['GeneratorAgent'],
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Use your knowledge to feedback the quality and difficulty of multiple-choice questions generated by generator.
            . Provide constructive feedback. 
            Here is the criteria to pass (denoted by start with '-'):
                - Question must start from I., II., III., etc (must start from 1) (IMPORTANT).
                - Current question is considered diffult, if it must be satisfied one of the difficult criteria below 
                (denoted by each line start with '+'):
                    + Implicit question (reasoning and thinking)
                    + Hard concept relate to {task} (IMPORTANT).
                    + Business scenario or Coding scenario (IMPORTANT).
                    + Strong relevant distractors (IMPORTANT).
                - Must have only one corrected label for answer (IMPORTANT). For example: 'The corrected answer is: 'A)', which denote only A).
                - Answer must be corrected (IMPORTANT).
            . Response 'PLEASE GENERATE {rem_of_mcqs} MCQs AGAIN' in the end of feedback please.
            """
        )
        termination = MaxMessageTermination(4)
        team = RoundRobinGroupChat([generator_agent, evaluator_agent], termination_condition=termination)

        async def main() -> None:
            ans = await Console(team.run_stream(task=task))
            for i in range(len(ans.messages)):
                if ans.messages[i].source == 'GeneratorAgent':
                    self.__mcqs = ans.messages[i].content
        asyncio.run(main())
        
    def retake_MCQs(self, mcqs, num_of_mcqs, task, wrong_questions):
        generator_agent = AssistantAgent(
            "GeneratorAgent",
            description="An agent for multiple-choice questions generation.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Here's all the previous MCQs relate to {task} that you generated before (delimited by ---------).
            -------------------
            {mcqs}
            -------------------
            . Student had wrong answers in question {wrong_questions}.
            To support student improve their weakness and retake the test
            . Now you generate {num_of_mcqs} MCQs again that review all {wrong_questions} wrong MCQs to encourage
            student's weakness.
            You must follow the pattern below (denoted by each line start with '-'):
                - Each question must contains 4 options.
                - Start each question number with Greece numbers I., II., etc.
                - Start answer with pattern 'A)', 'B)', 'C)', 'D)'.
                - Only one answer is corrected.
                - Start the corrected answer with pattern 'The correct answer is: A), B), C) or D)' (note always print ')' after corrected option)
                - Start the explanation by 'Explanation:', you should explain why it is correct.
                - Start the reference by 'For more information:', you refer useful link relate to Computer Science
                as you know (GeeksForGeeks, Wikipedia, etc).
            """
        )
        
        check_repeat_agent = AssistantAgent(
            "CheckRepeatAgent",
            description="An agent for evaluating multiple-choice questions.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Use your knowledge to feedback the quality multiple-choice questions generated by the generator agent.
            . Provide constructive feedback. 
            Because student had wrong answers in question {wrong_questions}. 
            Provide a constructive feedback.
            Here is the criteria to pass (denoted by start with '-'):
                - Multiple-choice questions must cover all wrong questions to improve student's weakness (IMPORTANT).
                - Must have ONLY ONE corrected label for answer (IMPORTANT). For example: 'The corrected answer is: 'A)', which denote only A).
                - Answer must be corrected (IMPORTANT).
            . Response 'PLEASE GENERATE {num_of_mcqs} MCQs AGAIN' in the end of feedback please.
            """
        )
        
        termination = MaxMessageTermination(4)
        team = RoundRobinGroupChat([generator_agent, check_repeat_agent], termination_condition=termination)
        
        async def main() -> None:
            ans = await Console(team.run_stream(task=task))
            for i in range(len(ans.messages)):
                if ans.messages[i].source == 'GeneratorAgent':
                    self.__mcqs = ans.messages[i].content
        asyncio.run(main())
        
        
    def level_up_MCQs(self, mcqs, num_of_mcqs, task):
        generator_agent = AssistantAgent(
            name="GeneratorAgent",
            description="An agent for difficult multiple-choice questions generation.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Here's all the previous MCQs relate to {task} that you generated before (delimited by ---------).
            -------------------
            {mcqs}
            -------------------
            . Student had passed all the above multiple-choice questions well.
            To challenge student with more difficult level of multiple-choice questions.
            . Now you generate {num_of_mcqs} MCQs with difficult level than all previous.
            You must follow the pattern below (denoted by each line start with '-'):
                - Each question must contains 4 options.
                - Start each question number with Greece numbers I., II., etc.
                - Start answer with pattern 'A)', 'B)', 'C)', 'D)'.
                - Only one answer is corrected.
                - Start the corrected answer with pattern 'The correct answer is: A), B), C) or D)' (note always print ')' after corrected option)
                - Start the explanation by 'Explanation:', you should explain why it is correct.
                - Start the reference by 'For more information:', you refer useful link relate to Computer Science
                as you know (GeeksForGeeks, Wikipedia, etc).
            """
        )
        
        # Chain of Thought for evaluation
        evaluator_hard_agent = AssistantAgent(
            "EvaluatorHardAgent",
            description="An agent for evaluating the difficulty of multiple-choice questions.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            You read the all previous MCQs relate to {task} (delimited by ---------).
            -------------------
            {mcqs}
            -------------------
            Use your knowledge to feedback the quality and difficulty of current multiple-choice questions compare to previous.
            . Provide constructive feedback. 
            Here is the criteria to pass (denoted by each line start with '-'):
                - Current question must be more difficult than all previous.
                - Current question is considered diffult, if it must be satisfied one of the difficult criteria below 
                (denoted by each line start with '+'):
                    + More various topic than previous 
                    + Implicit question (reasoning and thinking)
                    + Hard concept relate to {task} (IMPORTANT).
                    + Business scenario or Coding scenario (IMPORTANT).
                    + Strong relevant distractors (IMPORTANT).
                - Must have only one corrected label for answer (IMPORTANT). For example: 'The corrected answer is: 'A)', which denote only A).
                - Answer must be corrected (IMPORTANT).
            . Response 'PLEASE GENERATE {num_of_mcqs} MCQs AGAIN' in the end of feedback please.
            """
        )
        
        termination = MaxMessageTermination(4)
        team = RoundRobinGroupChat([generator_agent, evaluator_hard_agent], termination_condition=termination)
        
        async def main() -> None:
            ans = await Console(team.run_stream(task=task))
            for i in range(len(ans.messages)):
                if ans.messages[i].source == 'GeneratorAgent':
                    self.__mcqs = ans.messages[i].content
        asyncio.run(main())
        
        
    def generate_FIBQs(self, title, num_of_fibqs,context, task):
        generator_agent = AssistantAgent(
            name="GeneratorAgent",
            description="An agent for fill in the blank questions generation.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            I need you help me in domain of {title}. 
            Use your knowledge to generate to me {num_of_fibqs} fill in the blank questions relate to {task}.
            Here is a context that support you to generate fill in the blank questions: 
            ------------------------------
            {context}
            ------------------------------
            . Note that if context is empty or not support enough information, you must use your
            specific-domain knowledge to back up.
            . You must follow the pattern below (denoted by each line start with '-'):
                - Start each question number with Greece numbers I., II., etc.
                - Start the corrected answer with pattern 'The correct answer is: '. (Note: If it has multiple-answer, must use '/' only, don't show more)
                - Start the explanation by 'Explanation:', you should explain why it is correct.
                - Start the reference by 'For more information:', you refer useful link relate to Computer Science
                as you know (GeeksForGeeks, Wikipedia, etc).
            """
        )
        evaluator_agent = AssistantAgent(
            name="EvaluatorAgent",
            description="An agent for evaluating fill in the blank questions.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Use your knowledge to feedback the quality fill in the blank questions generated by the generator.
            . Provide constructive feedback. 
            Here is the criteria to pass (denoted by each line start with '-'):
                - Question must relevant to {task}.
                - Question must be clear (must contains question and answer).
                - Answer must be correct (IMPORTANT).
            . Response 'PLEASE GENERATE {num_of_fibqs} Fill in the blank questons AGAIN' in the end of feedback please.
            """
        )
        termination = MaxMessageTermination(4)
        team = RoundRobinGroupChat([generator_agent, evaluator_agent], termination_condition=termination)
        
        async def main() -> None:
            ans = await Console(team.run_stream(task=task))
            for i in range(len(ans.messages)):
                if ans.messages[i].source == 'GeneratorAgent':
                    self.__fibqs = ans.messages[i].content
        asyncio.run(main())
        
    
    def generate_hard_FIBQs(self,title, num_of_fibqs, context, task):
        generator_agent = AssistantAgent(
            name="GeneratorAgent",
            description="An agent for difficult fill in the blank questions generation.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            I need you help me in domain of {title}. 
            Use your knowledge to generate to me {num_of_fibqs} fill in the blank questions relate to {task}.
            Here is a context that support you to generate fill in the blank questions: 
            ------------------------------
            {context}
            ------------------------------
            . Note that if context is empty or not support enough information, you must use your
            specific-domain knowledge to back up.
            . You must follow the pattern below (denoted by each line start with '-'):
                - Start each question number with Greece numbers I., II., etc.
                - Start the corrected answer with pattern 'The correct answer is: ' (Note: If it has multiple-answer, must use '/' only, don't show more)
                - Start the explanation by 'Explanation:', you should explain why it is correct.
                - Start the reference by 'For more information:', you refer useful link relate to Computer Science
                as you know (GeeksForGeeks, Wikipedia, etc).
            """
        )
        
        # Chain of Thought for evaluation
        evaluator_hard_agent = AssistantAgent(
            "EvaluatorHardAgent",
            description="An agent for evaluating the difficulty of fill in the blank questions.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Use your knowledge to feedback the quality and difficulty of fill in the blank questions generated by generator.
            . Provide constructive feedback. 
            Here is the criteria to pass (denoted by each line start with '-'):
                - Question must be clear (must contains question and answer).
                - Question is considered diffult, if it must be satisfied one of the difficult criteria below 
                (denoted by each line start with '+'):
                    + Implicit question (reasoning and thinking)
                    + Hard concept relate to {task}
                    + Business or Coding scenario (IMPORTANT).
                - Answer must be corrected (IMPORTANT).
            . Response 'PLEASE GENERATE {num_of_fibqs} Fill in the blank questons AGAIN' in the end of feedback please.
            """
        )
        
        termination = MaxMessageTermination(4)
        team = RoundRobinGroupChat([generator_agent, evaluator_hard_agent], termination_condition=termination)
        
        async def main() -> None:
            ans = await Console(team.run_stream(task=task))
            for i in range(len(ans.messages)):
                if ans.messages[i].source == 'GeneratorAgent':
                    self.__fibqs = ans.messages[i].content
        asyncio.run(main())
        
    def retake_FIBQs(self, fibqs, num_of_fibqs, task, wrong_questions):
        generator_agent = AssistantAgent(
            "GeneratorAgent",
            description="An agent for fill in the blank questions generation.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Here's all the previous Fill in the blank questions relate to {task} that you generated before (delimited by ---------).
            -------------------
            {fibqs}
            -------------------
            . Student had wrong answers in question {wrong_questions}.
            To support student improve their weakness and retake the test
            . Now you generate {num_of_fibqs} fill in the blank questions 
            again that review all {wrong_questions} wrong questions to cover student's weakness.
            . You must follow the pattern below (denoted by each line start with '-'):
                - Start each question number with Greece numbers I., II., etc.
                - Start the corrected answer with pattern 'The correct answer is: '. (Note: If it has multiple-answer, must use '/' only, don't show more)
                - Start the explanation by 'Explanation:', you should explain why it is correct.
                - Start the reference by 'For more information:', you refer useful link relate to Computer Science
                as you know (GeeksForGeeks, Wikipedia, etc).
            """
        )
        
        check_repeat_agent = AssistantAgent(
            "CheckRepeatAgent",
            description="An agent for evaluating fill in the blank questions.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Use your knowledge to feedback the quality Fill in the blank questions generated by the generator agent.
            . Provide constructive feedback. 
            Because student had wrong answers in question {wrong_questions}. 
            Provide a constructive feedback.
            Here is the criteria to pass (denoted by each line start with '-'):
                - Quesitons must be clear (must contains question and answer).
                - Fill in the blank questions must cover all wrong questions to improve student's weakness (IMPORTANT).
                - Answer must be corrected (IMPORTANT).
            . Response 'PLEASE GENERATE {num_of_fibqs} Fill in the blank questons AGAIN' in the end of feedback please.
            """
        )
        
        termination = MaxMessageTermination(4)
        team = RoundRobinGroupChat([generator_agent, check_repeat_agent], termination_condition=termination)
        
        async def main() -> None:
            ans = await Console(team.run_stream(task=task))
            for i in range(len(ans.messages)):
                if ans.messages[i].source == 'GeneratorAgent':
                    self.__mcqs = ans.messages[i].content
        asyncio.run(main())
        
    def level_up_FIBQs(self, fibqs, num_of_fibqs, task):
        generator_agent = AssistantAgent(
            name="GeneratorAgent",
            description="An agent for difficult fill in the blank questions generation.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            Here's all the previous Fill in the blank questions relate to {task} that you generated before (delimited by ---------).
            -------------------
            {fibqs}
            -------------------
            . Student had passed all the above Fill in the blank questions well.
            To challenge student with more difficult level of Fill in the blank questions.
            . Now you generate {num_of_fibqs} Fill in the blank with difficult level than all previous.
            . You must follow the pattern below (denoted by each line start with '-'):
                - Start each question number with Greece numbers I., II., etc.
                - Start the corrected answer with pattern 'The correct answer is: '. (Note: If it has multiple-answer, must use '/' only, don't show more)
                - Start the explanation by 'Explanation:', you should explain why it is correct.
                - Start the reference by 'For more information:', you refer useful link relate to Computer Science
                as you know (GeeksForGeeks, Wikipedia, etc).
            """
        )
        
        evaluator_hard_agent = AssistantAgent(
            "EvaluatorHardAgent",
            description="An agent for evaluating the difficulty of fill in the blank questions.",
            model_client=self.__model_client,
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            You read the all previous Fill in the blank relate to {task} (delimited by ---------).
            -------------------
            {fibqs}
            -------------------
            Use your knowledge to feedback the quality and difficulty of current Fill in the blank questions compare to previous.
            . Provide constructive feedback. 
            Here is the criteria to pass (denoted by each line start with '-'):
                - Current question must be more difficult than all previous.
                - Current question must be clear (must contains question and answer).
                - Current question is considered diffult, if it must be satisfied one of the difficult criteria below 
                (denoted by each line start with '+')
                    + More various topic than previous 
                    + Implicit question (reasoning and thinking)
                    + Hard concept relate to {task}
                    + Business or Coding scenario (IMPORTANT).
                - Answer must be corrected (IMPORTANT).
            . Response 'PLEASE GENERATE {num_of_fibqs} Fill in the blank questons AGAIN' in the end of feedback please.
            """
        )
        
        termination = MaxMessageTermination(4)
        team = RoundRobinGroupChat([generator_agent, evaluator_hard_agent], termination_condition=termination)
        
        async def main() -> None:
            ans = await Console(team.run_stream(task=task))
            for i in range(len(ans.messages)):
                if ans.messages[i].source == 'GeneratorAgent':
                    self.__mcqs = ans.messages[i].content
        asyncio.run(main())
        
    def generate_MCQs_human_in_the_loop(self, title, mcqs, user_feedback, topic):
        generator_agent = AssistantAgent(
            "GeneratorAgent",
            description="An agent for multiple-choice questions generation.",
            model_client=self.__model_client,
            # handoffs=['EvaluatorAgent', 'UserAgent'],
            system_message=f"""
            You are an expert, a very outstanding professor in Computer Science.
            I need you help me in domain of {title}. 
            Use your knowledge to generate to me a new multiple-choice question relate to {topic}.
            Here's a multiple-choice question that you generated before, but user disagreed with it (delimited by ----):
            ------------------------------
            {mcqs}
            ------------------------------
            Here is a user's feedback that support you to generate about a previous multiple-choice question (delimited by ----): 
            ------------------------------
            {user_feedback}
            ------------------------------
            . You must follow the pattern below (denoted by each line start with '-'):
                - Each question must contains 4 options.
                - Start each question number with Greece numbers I., II., etc.
                - Start answer with pattern 'A)', 'B)', 'C)', 'D)'.
                - Only one answer is corrected.
                - Start the corrected answer with pattern 'The correct answer is: A), B), C) or D)' (note always print ')' after corrected option)
                - Start the explanation by 'Explanation:', you should explain why it is correct.
                - Start the reference by 'For more information:', you refer useful link relate to Computer Science
                as you know (GeeksForGeeks, Wikipedia, etc).
            """
        )
        termination = MaxMessageTermination(2)
        team = RoundRobinGroupChat([generator_agent], termination_condition=termination)
        
        async def main() -> None:
            ans = await Console(team.run_stream(task=f"Generate to me a MCQ based on user feedback"))
            for i in range(len(ans.messages)):
                if ans.messages[i].source == 'GeneratorAgent':
                    self.__mcqs = ans.messages[i].content
        asyncio.run(main())
        
    def get_MCQs(self):
        return self.__mcqs
    
    def get_FIBQs(self):
        return self.__fibqs
    
    def get_model(self):
        return self.__model_client
    