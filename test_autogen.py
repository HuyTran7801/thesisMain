from model.MultiAgentMistral import *
from model.RAG import *
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.conditions import MaxMessageTermination, TextMentionTermination
from autogen_agentchat.teams import RoundRobinGroupChat
from autogen_agentchat.ui import Console
from typing import Sequence
# import asyncio
from google import genai
from autogen_ext.models.openai import OpenAIChatCompletionClient


model_client = OpenAIChatCompletionClient(
    model='gemini-1.5-pro',
    api_key='AIzaSyDHWooSXhFddX9WEIpQtbPqPv0ld2ws4m4'
)

rag = RAG('./data/oop/user1')

context, docs = rag.semantic_search('Abstraction, Class, Objects', 12)

title = 'Object Oriented Programming'

generator_agent = AssistantAgent(
    "GeneratorAgent",
    description="An agent for multiple-choice questions generation.",
    model_client=model_client,
    system_message=f"""
    You are an expert, a very outstanding professor in Computer Science.
    I need you help me in domain of {title}. Use your knowledge to generate to me 10 MCQs 
    relate to below context.
    Here is a context: 
    ------------------------------
    {context}
    ------------------------------
    . You must follow the pattern here:
        - Each question must contains 4 options.
        - Start each question number with 1., 2., ..., 10.
        - Start answer with pattern 'A)', 'B)', 'C)', 'D)'.
        - Start the corrected answer with pattern 'The correct answer is: A), B), C) or D)'.
        - Start the explanation by 'Explanation:', you should explain why it is correct.
        - Start the reference by 'For more information:', you refer useful link relate to Computer Science
        as you know (GeeksForGeeks, Wikipedia, etc).
    """
)

evaluator_agent = AssistantAgent(
    "EvaluatorAgent",
    description="An agent for evaluating multiple-choice questions.",
    model_client=model_client,
    system_message=f"""
    You are an expert, a very outstanding professor in Computer Science.
    Use your knowledge to feedback the quality multiple-choice questions generated by the generator.
    . Provide constructive feedback. Respond with 'APPROVE' to when your feedbacks are addressed.
    """
)

termination = TextMentionTermination("APPROVE") | MaxMessageTermination(10)

team = RoundRobinGroupChat([generator_agent, evaluator_agent], termination_condition=termination)

# await print(team.run_stream(task="Generate to me 10 MCQs relate to Abstraction, Class."))

async def main() -> None:
    ans = await Console(team.run_stream(task="Generate to me 10 MCQs relate to Abstraction, Class."))
    # print('ANS ')
    # print(ans.messages)
    for text_message in ans.messages:
        if text_message.source == 'GeneratorAgent':
            print('CONTENT')
            print(text_message.content, ' -- ',type(text_message.content))

# asyncio.run(main())

